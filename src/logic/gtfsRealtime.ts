/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/class-name-casing */
/* eslint-disable @typescript-eslint/camelcase */
/* eslint-disable @typescript-eslint/interface-name-prefix */
// code generated by pbf v3.2.0
/* tslint:disable */

import Pbf from 'pbf'

export interface IFeedMessage {
    header: IFeedHeader
    entity?: IFeedEntity[]
}

export interface IFeedHeader {
    gtfs_realtime_version: string
    incrementality?: FeedHeader_Incrementality_Value
    timestamp?: number
}

export type FeedHeader_Incrementality_Key = 'FULL_DATASET' | 'DIFFERENTIAL'
export type FeedHeader_Incrementality_Value = 0 | 1

export interface IFeedEntity {
    id: string
    is_deleted?: boolean
    trip_update?: ITripUpdate
    vehicle?: IVehiclePosition
    alert?: IAlert
}

export interface ITripUpdate {
    trip: ITripDescriptor
    vehicle?: IVehicleDescriptor
    stop_time_update?: ITripUpdate_StopTimeUpdate[]
    timestamp?: number
    delay?: number
}

export interface ITripUpdate_StopTimeEvent {
    delay?: number
    time?: number
    uncertainty?: number
}

export interface ITripUpdate_StopTimeUpdate {
    stop_sequence?: number
    stop_id?: string
    arrival?: ITripUpdate_StopTimeEvent
    departure?: ITripUpdate_StopTimeEvent
    schedule_relationship?: TripUpdate_StopTimeUpdate_ScheduleRelationship_Value
}

export type TripUpdate_StopTimeUpdate_ScheduleRelationship_Key =
    | 'SCHEDULED'
    | 'SKIPPED'
    | 'NO_DATA'
export type TripUpdate_StopTimeUpdate_ScheduleRelationship_Value = 0 | 1 | 2

export interface IVehiclePosition {
    trip?: ITripDescriptor
    vehicle?: IVehicleDescriptor
    position?: IPosition
    current_stop_sequence?: number
    stop_id?: string
    current_status?: VehiclePosition_VehicleStopStatus_Value
    timestamp?: number
    congestion_level?: VehiclePosition_CongestionLevel_Value
    occupancy_status?: VehiclePosition_OccupancyStatus_Value
}

export type VehiclePosition_VehicleStopStatus_Key =
    | 'INCOMING_AT'
    | 'STOPPED_AT'
    | 'IN_TRANSIT_TO'
export type VehiclePosition_VehicleStopStatus_Value = 0 | 1 | 2

export type VehiclePosition_CongestionLevel_Key =
    | 'UNKNOWN_CONGESTION_LEVEL'
    | 'RUNNING_SMOOTHLY'
    | 'STOP_AND_GO'
    | 'CONGESTION'
    | 'SEVERE_CONGESTION'
export type VehiclePosition_CongestionLevel_Value = 0 | 1 | 2 | 3 | 4

export type VehiclePosition_OccupancyStatus_Key =
    | 'EMPTY'
    | 'MANY_SEATS_AVAILABLE'
    | 'FEW_SEATS_AVAILABLE'
    | 'STANDING_ROOM_ONLY'
    | 'CRUSHED_STANDING_ROOM_ONLY'
    | 'FULL'
    | 'NOT_ACCEPTING_PASSENGERS'
export type VehiclePosition_OccupancyStatus_Value = 0 | 1 | 2 | 3 | 4 | 5 | 6

export interface IAlert {
    active_period?: ITimeRange[]
    informed_entity?: IEntitySelector[]
    cause?: Alert_Cause_Value
    effect?: Alert_Effect_Value
    url?: ITranslatedString
    header_text?: ITranslatedString
    description_text?: ITranslatedString
}

export type Alert_Cause_Key =
    | 'UNKNOWN_CAUSE'
    | 'OTHER_CAUSE'
    | 'TECHNICAL_PROBLEM'
    | 'STRIKE'
    | 'DEMONSTRATION'
    | 'ACCIDENT'
    | 'HOLIDAY'
    | 'WEATHER'
    | 'MAINTENANCE'
    | 'CONSTRUCTION'
    | 'POLICE_ACTIVITY'
    | 'MEDICAL_EMERGENCY'
export type Alert_Cause_Value = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12

export type Alert_Effect_Key =
    | 'NO_SERVICE'
    | 'REDUCED_SERVICE'
    | 'SIGNIFICANT_DELAYS'
    | 'DETOUR'
    | 'ADDITIONAL_SERVICE'
    | 'MODIFIED_SERVICE'
    | 'OTHER_EFFECT'
    | 'UNKNOWN_EFFECT'
    | 'STOP_MOVED'
export type Alert_Effect_Value = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

export interface ITimeRange {
    start?: number
    end?: number
}

export interface IPosition {
    latitude: number
    longitude: number
    bearing?: number
    odometer?: number
    speed?: number
}

export interface ITripDescriptor {
    trip_id?: string
    route_id?: string
    direction_id?: number
    start_time?: string
    start_date?: string
    schedule_relationship?: TripDescriptor_ScheduleRelationship_Value
}

export type TripDescriptor_ScheduleRelationship_Key =
    | 'SCHEDULED'
    | 'ADDED'
    | 'UNSCHEDULED'
    | 'CANCELED'
export type TripDescriptor_ScheduleRelationship_Value = 0 | 1 | 2 | 3

export interface IVehicleDescriptor {
    id?: string
    label?: string
    license_plate?: string
}

export interface IEntitySelector {
    agency_id?: string
    route_id?: string
    route_type?: number
    trip?: ITripDescriptor
    stop_id?: string
}

export interface ITranslatedString {
    translation?: ITranslatedString_Translation[]
}

export interface ITranslatedString_Translation {
    text: string
    language?: string
}

export const FeedHeader = {
    read(pbf: Pbf, end?: number): IFeedHeader {
        return pbf.readFields(
            FeedHeader._readField,
            {
                gtfs_realtime_version: '',
                incrementality: { value: 0, options: {} },
                timestamp: 0,
            },
            end,
        )
    },
    _readField(tag: number, obj: any, pbf: Pbf): void {
        if (tag === 1) obj.gtfs_realtime_version = pbf.readString()
        else if (tag === 2) obj.incrementality = pbf.readVarint()
        else if (tag === 3) obj.timestamp = pbf.readVarint()
    },
    write(obj: IFeedHeader, pbf: Pbf): void {
        if (obj.gtfs_realtime_version)
            pbf.writeStringField(1, obj.gtfs_realtime_version)
        if (obj.incrementality != undefined)
            pbf.writeVarintField(2, obj.incrementality)
        if (obj.timestamp) pbf.writeVarintField(3, obj.timestamp)
    },

    Incrementality: {
        FULL_DATASET: {
            value: 0,
            options: {},
        },
        DIFFERENTIAL: {
            value: 1,
            options: {},
        },
    } as {
        [K in FeedHeader_Incrementality_Key]: {
            value: FeedHeader_Incrementality_Value
            options: any
        }
    },
}

export const TimeRange = {
    read(pbf: Pbf, end?: number): ITimeRange {
        return pbf.readFields(TimeRange._readField, { start: 0, end: 0 }, end)
    },
    _readField(tag: number, obj: any, pbf: Pbf): void {
        if (tag === 1) obj.start = pbf.readVarint()
        else if (tag === 2) obj.end = pbf.readVarint()
    },
    write(obj: ITimeRange, pbf: Pbf): void {
        if (obj.start) pbf.writeVarintField(1, obj.start)
        if (obj.end) pbf.writeVarintField(2, obj.end)
    },
}

export const Position = {
    read(pbf: Pbf, end?: number): IPosition {
        return pbf.readFields(
            Position._readField,
            { latitude: 0, longitude: 0, bearing: 0, odometer: 0, speed: 0 },
            end,
        )
    },
    _readField(tag: number, obj: any, pbf: Pbf): void {
        if (tag === 1) obj.latitude = pbf.readFloat()
        else if (tag === 2) obj.longitude = pbf.readFloat()
        else if (tag === 3) obj.bearing = pbf.readFloat()
        else if (tag === 4) obj.odometer = pbf.readDouble()
        else if (tag === 5) obj.speed = pbf.readFloat()
    },
    write(obj: IPosition, pbf: Pbf): void {
        if (obj.latitude) pbf.writeFloatField(1, obj.latitude)
        if (obj.longitude) pbf.writeFloatField(2, obj.longitude)
        if (obj.bearing) pbf.writeFloatField(3, obj.bearing)
        if (obj.odometer) pbf.writeDoubleField(4, obj.odometer)
        if (obj.speed) pbf.writeFloatField(5, obj.speed)
    },
}

export const TripDescriptor = {
    read(pbf: Pbf, end?: number): ITripDescriptor {
        return pbf.readFields(
            TripDescriptor._readField,
            {
                trip_id: '',
                route_id: '',
                direction_id: 0,
                start_time: '',
                start_date: '',
                schedule_relationship: 0,
            },
            end,
        )
    },
    _readField(tag: number, obj: any, pbf: Pbf): void {
        if (tag === 1) obj.trip_id = pbf.readString()
        else if (tag === 5) obj.route_id = pbf.readString()
        else if (tag === 6) obj.direction_id = pbf.readVarint()
        else if (tag === 2) obj.start_time = pbf.readString()
        else if (tag === 3) obj.start_date = pbf.readString()
        else if (tag === 4) obj.schedule_relationship = pbf.readVarint()
    },
    write(obj: ITripDescriptor, pbf: Pbf): void {
        if (obj.trip_id) pbf.writeStringField(1, obj.trip_id)
        if (obj.route_id) pbf.writeStringField(5, obj.route_id)
        if (obj.direction_id) pbf.writeVarintField(6, obj.direction_id)
        if (obj.start_time) pbf.writeStringField(2, obj.start_time)
        if (obj.start_date) pbf.writeStringField(3, obj.start_date)
        if (obj.schedule_relationship)
            pbf.writeVarintField(4, obj.schedule_relationship)
    },

    ScheduleRelationship: {
        SCHEDULED: {
            value: 0,
            options: {},
        },
        ADDED: {
            value: 1,
            options: {},
        },
        UNSCHEDULED: {
            value: 2,
            options: {},
        },
        CANCELED: {
            value: 3,
            options: {},
        },
    } as {
        [K in TripDescriptor_ScheduleRelationship_Key]: {
            value: TripDescriptor_ScheduleRelationship_Value
            options: any
        }
    },
}

export const VehicleDescriptor = {
    read(pbf: Pbf, end?: number): IVehicleDescriptor {
        return pbf.readFields(
            VehicleDescriptor._readField,
            { id: '', label: '', license_plate: '' },
            end,
        )
    },
    _readField(tag: number, obj: any, pbf: Pbf): void {
        if (tag === 1) obj.id = pbf.readString()
        else if (tag === 2) obj.label = pbf.readString()
        else if (tag === 3) obj.license_plate = pbf.readString()
    },
    write(obj: IVehicleDescriptor, pbf: Pbf): void {
        if (obj.id) pbf.writeStringField(1, obj.id)
        if (obj.label) pbf.writeStringField(2, obj.label)
        if (obj.license_plate) pbf.writeStringField(3, obj.license_plate)
    },
}

export const TripUpdate = {
    read(pbf: Pbf, end?: number): ITripUpdate {
        return pbf.readFields(
            TripUpdate._readField,
            {
                trip: null,
                vehicle: null,
                stop_time_update: [],
                timestamp: 0,
                delay: 0,
            },
            end,
        )
    },
    _readField(tag: number, obj: any, pbf: Pbf): void {
        if (tag === 1)
            obj.trip = TripDescriptor.read(pbf, pbf.readVarint() + pbf.pos)
        else if (tag === 3)
            obj.vehicle = VehicleDescriptor.read(
                pbf,
                pbf.readVarint() + pbf.pos,
            )
        else if (tag === 2)
            obj.stop_time_update.push(
                TripUpdate.StopTimeUpdate.read(pbf, pbf.readVarint() + pbf.pos),
            )
        else if (tag === 4) obj.timestamp = pbf.readVarint()
        else if (tag === 5) obj.delay = pbf.readVarint(true)
    },
    write(obj: ITripUpdate, pbf: Pbf): void {
        if (obj.trip) pbf.writeMessage(1, TripDescriptor.write, obj.trip)
        if (obj.vehicle)
            pbf.writeMessage(3, VehicleDescriptor.write, obj.vehicle)
        if (obj.stop_time_update)
            for (let i = 0; i < obj.stop_time_update.length; i++)
                pbf.writeMessage(
                    2,
                    TripUpdate.StopTimeUpdate.write,
                    obj.stop_time_update[i],
                )
        if (obj.timestamp) pbf.writeVarintField(4, obj.timestamp)
        if (obj.delay) pbf.writeVarintField(5, obj.delay)
    },

    StopTimeEvent: {
        read(pbf: Pbf, end?: number): ITripUpdate_StopTimeEvent {
            return pbf.readFields(
                TripUpdate.StopTimeEvent._readField,
                { delay: 0, time: 0, uncertainty: 0 },
                end,
            )
        },
        _readField(tag: number, obj: any, pbf: Pbf): void {
            if (tag === 1) obj.delay = pbf.readVarint(true)
            else if (tag === 2) obj.time = pbf.readVarint(true)
            else if (tag === 3) obj.uncertainty = pbf.readVarint(true)
        },
        write(obj: ITripUpdate_StopTimeEvent, pbf: Pbf): void {
            if (obj.delay) pbf.writeVarintField(1, obj.delay)
            if (obj.time) pbf.writeVarintField(2, obj.time)
            if (obj.uncertainty) pbf.writeVarintField(3, obj.uncertainty)
        },
    },

    StopTimeUpdate: {
        read(pbf: Pbf, end?: number): ITripUpdate_StopTimeUpdate {
            return pbf.readFields(
                TripUpdate.StopTimeUpdate._readField,
                {
                    stop_sequence: 0,
                    stop_id: '',
                    arrival: null,
                    departure: null,
                    schedule_relationship: { value: 0, options: {} },
                },
                end,
            )
        },
        _readField(tag: number, obj: any, pbf: Pbf): void {
            if (tag === 1) obj.stop_sequence = pbf.readVarint()
            else if (tag === 4) obj.stop_id = pbf.readString()
            else if (tag === 2)
                obj.arrival = TripUpdate.StopTimeEvent.read(
                    pbf,
                    pbf.readVarint() + pbf.pos,
                )
            else if (tag === 3)
                obj.departure = TripUpdate.StopTimeEvent.read(
                    pbf,
                    pbf.readVarint() + pbf.pos,
                )
            else if (tag === 5) obj.schedule_relationship = pbf.readVarint()
        },
        write(obj: ITripUpdate_StopTimeUpdate, pbf: Pbf): void {
            if (obj.stop_sequence) pbf.writeVarintField(1, obj.stop_sequence)
            if (obj.stop_id) pbf.writeStringField(4, obj.stop_id)
            if (obj.arrival)
                pbf.writeMessage(2, TripUpdate.StopTimeEvent.write, obj.arrival)
            if (obj.departure)
                pbf.writeMessage(
                    3,
                    TripUpdate.StopTimeEvent.write,
                    obj.departure,
                )
            if (obj.schedule_relationship != undefined)
                pbf.writeVarintField(5, obj.schedule_relationship)
        },

        ScheduleRelationship: {
            SCHEDULED: {
                value: 0,
                options: {},
            },
            SKIPPED: {
                value: 1,
                options: {},
            },
            NO_DATA: {
                value: 2,
                options: {},
            },
        } as {
            [K in TripUpdate_StopTimeUpdate_ScheduleRelationship_Key]: {
                value: TripUpdate_StopTimeUpdate_ScheduleRelationship_Value
                options: any
            }
        },
    },
}

export const VehiclePosition = {
    read(pbf: Pbf, end?: number): IVehiclePosition {
        return pbf.readFields(
            VehiclePosition._readField,
            {
                trip: null,
                vehicle: null,
                position: null,
                current_stop_sequence: 0,
                stop_id: '',
                current_status: { value: 2, options: {} },
                timestamp: 0,
                congestion_level: 0,
                occupancy_status: 0,
            },
            end,
        )
    },
    _readField(tag: number, obj: any, pbf: Pbf): void {
        if (tag === 1)
            obj.trip = TripDescriptor.read(pbf, pbf.readVarint() + pbf.pos)
        else if (tag === 8)
            obj.vehicle = VehicleDescriptor.read(
                pbf,
                pbf.readVarint() + pbf.pos,
            )
        else if (tag === 2)
            obj.position = Position.read(pbf, pbf.readVarint() + pbf.pos)
        else if (tag === 3) obj.current_stop_sequence = pbf.readVarint()
        else if (tag === 7) obj.stop_id = pbf.readString()
        else if (tag === 4) obj.current_status = pbf.readVarint()
        else if (tag === 5) obj.timestamp = pbf.readVarint()
        else if (tag === 6) obj.congestion_level = pbf.readVarint()
        else if (tag === 9) obj.occupancy_status = pbf.readVarint()
    },
    write(obj: IVehiclePosition, pbf: Pbf): void {
        if (obj.trip) pbf.writeMessage(1, TripDescriptor.write, obj.trip)
        if (obj.vehicle)
            pbf.writeMessage(8, VehicleDescriptor.write, obj.vehicle)
        if (obj.position) pbf.writeMessage(2, Position.write, obj.position)
        if (obj.current_stop_sequence)
            pbf.writeVarintField(3, obj.current_stop_sequence)
        if (obj.stop_id) pbf.writeStringField(7, obj.stop_id)
        if (obj.current_status != undefined)
            pbf.writeVarintField(4, obj.current_status)
        if (obj.timestamp) pbf.writeVarintField(5, obj.timestamp)
        if (obj.congestion_level) pbf.writeVarintField(6, obj.congestion_level)
        if (obj.occupancy_status) pbf.writeVarintField(9, obj.occupancy_status)
    },

    VehicleStopStatus: {
        INCOMING_AT: {
            value: 0,
            options: {},
        },
        STOPPED_AT: {
            value: 1,
            options: {},
        },
        IN_TRANSIT_TO: {
            value: 2,
            options: {},
        },
    } as {
        [K in VehiclePosition_VehicleStopStatus_Key]: {
            value: VehiclePosition_VehicleStopStatus_Value
            options: any
        }
    },
    CongestionLevel: {
        UNKNOWN_CONGESTION_LEVEL: {
            value: 0,
            options: {},
        },
        RUNNING_SMOOTHLY: {
            value: 1,
            options: {},
        },
        STOP_AND_GO: {
            value: 2,
            options: {},
        },
        CONGESTION: {
            value: 3,
            options: {},
        },
        SEVERE_CONGESTION: {
            value: 4,
            options: {},
        },
    } as {
        [K in VehiclePosition_CongestionLevel_Key]: {
            value: VehiclePosition_CongestionLevel_Value
            options: any
        }
    },
    OccupancyStatus: {
        EMPTY: {
            value: 0,
            options: {},
        },
        MANY_SEATS_AVAILABLE: {
            value: 1,
            options: {},
        },
        FEW_SEATS_AVAILABLE: {
            value: 2,
            options: {},
        },
        STANDING_ROOM_ONLY: {
            value: 3,
            options: {},
        },
        CRUSHED_STANDING_ROOM_ONLY: {
            value: 4,
            options: {},
        },
        FULL: {
            value: 5,
            options: {},
        },
        NOT_ACCEPTING_PASSENGERS: {
            value: 6,
            options: {},
        },
    } as {
        [K in VehiclePosition_OccupancyStatus_Key]: {
            value: VehiclePosition_OccupancyStatus_Value
            options: any
        }
    },
}

export const EntitySelector = {
    read(pbf: Pbf, end?: number): IEntitySelector {
        return pbf.readFields(
            EntitySelector._readField,
            {
                agency_id: '',
                route_id: '',
                route_type: 0,
                trip: null,
                stop_id: '',
            },
            end,
        )
    },
    _readField(tag: number, obj: any, pbf: Pbf): void {
        if (tag === 1) obj.agency_id = pbf.readString()
        else if (tag === 2) obj.route_id = pbf.readString()
        else if (tag === 3) obj.route_type = pbf.readVarint(true)
        else if (tag === 4)
            obj.trip = TripDescriptor.read(pbf, pbf.readVarint() + pbf.pos)
        else if (tag === 5) obj.stop_id = pbf.readString()
    },
    write(obj: IEntitySelector, pbf: Pbf): void {
        if (obj.agency_id) pbf.writeStringField(1, obj.agency_id)
        if (obj.route_id) pbf.writeStringField(2, obj.route_id)
        if (obj.route_type) pbf.writeVarintField(3, obj.route_type)
        if (obj.trip) pbf.writeMessage(4, TripDescriptor.write, obj.trip)
        if (obj.stop_id) pbf.writeStringField(5, obj.stop_id)
    },
}

export const TranslatedString = {
    read(pbf: Pbf, end?: number): ITranslatedString {
        return pbf.readFields(
            TranslatedString._readField,
            { translation: [] },
            end,
        )
    },
    _readField(tag: number, obj: any, pbf: Pbf): void {
        if (tag === 1)
            obj.translation.push(
                TranslatedString.Translation.read(
                    pbf,
                    pbf.readVarint() + pbf.pos,
                ),
            )
    },
    write(obj: ITranslatedString, pbf: Pbf): void {
        if (obj.translation)
            for (let i = 0; i < obj.translation.length; i++)
                pbf.writeMessage(
                    1,
                    TranslatedString.Translation.write,
                    obj.translation[i],
                )
    },

    Translation: {
        read(pbf: Pbf, end?: number): ITranslatedString_Translation {
            return pbf.readFields(
                TranslatedString.Translation._readField,
                { text: '', language: '' },
                end,
            )
        },
        _readField(tag: number, obj: any, pbf: Pbf): void {
            if (tag === 1) obj.text = pbf.readString()
            else if (tag === 2) obj.language = pbf.readString()
        },
        write(obj: ITranslatedString_Translation, pbf: Pbf): void {
            if (obj.text) pbf.writeStringField(1, obj.text)
            if (obj.language) pbf.writeStringField(2, obj.language)
        },
    },
}

export const Alert = {
    read(pbf: Pbf, end?: number): IAlert {
        return pbf.readFields(
            Alert._readField,
            {
                active_period: [],
                informed_entity: [],
                cause: { value: 1, options: {} },
                effect: { value: 8, options: {} },
                url: null,
                header_text: null,
                description_text: null,
            },
            end,
        )
    },
    _readField(tag: number, obj: any, pbf: Pbf): void {
        if (tag === 1)
            obj.active_period.push(
                TimeRange.read(pbf, pbf.readVarint() + pbf.pos),
            )
        else if (tag === 5)
            obj.informed_entity.push(
                EntitySelector.read(pbf, pbf.readVarint() + pbf.pos),
            )
        else if (tag === 6) obj.cause = pbf.readVarint()
        else if (tag === 7) obj.effect = pbf.readVarint()
        else if (tag === 8)
            obj.url = TranslatedString.read(pbf, pbf.readVarint() + pbf.pos)
        else if (tag === 10)
            obj.header_text = TranslatedString.read(
                pbf,
                pbf.readVarint() + pbf.pos,
            )
        else if (tag === 11)
            obj.description_text = TranslatedString.read(
                pbf,
                pbf.readVarint() + pbf.pos,
            )
    },
    write(obj: IAlert, pbf: Pbf): void {
        if (obj.active_period)
            for (let i = 0; i < obj.active_period.length; i++)
                pbf.writeMessage(1, TimeRange.write, obj.active_period[i])
        if (obj.informed_entity)
            for (let i = 0; i < obj.informed_entity.length; i++)
                pbf.writeMessage(
                    5,
                    EntitySelector.write,
                    obj.informed_entity[i],
                )
        if (obj.cause != undefined) pbf.writeVarintField(6, obj.cause)
        if (obj.effect != undefined) pbf.writeVarintField(7, obj.effect)
        if (obj.url) pbf.writeMessage(8, TranslatedString.write, obj.url)
        if (obj.header_text)
            pbf.writeMessage(10, TranslatedString.write, obj.header_text)
        if (obj.description_text)
            pbf.writeMessage(11, TranslatedString.write, obj.description_text)
    },

    Cause: {
        UNKNOWN_CAUSE: {
            value: 1,
            options: {},
        },
        OTHER_CAUSE: {
            value: 2,
            options: {},
        },
        TECHNICAL_PROBLEM: {
            value: 3,
            options: {},
        },
        STRIKE: {
            value: 4,
            options: {},
        },
        DEMONSTRATION: {
            value: 5,
            options: {},
        },
        ACCIDENT: {
            value: 6,
            options: {},
        },
        HOLIDAY: {
            value: 7,
            options: {},
        },
        WEATHER: {
            value: 8,
            options: {},
        },
        MAINTENANCE: {
            value: 9,
            options: {},
        },
        CONSTRUCTION: {
            value: 10,
            options: {},
        },
        POLICE_ACTIVITY: {
            value: 11,
            options: {},
        },
        MEDICAL_EMERGENCY: {
            value: 12,
            options: {},
        },
    } as { [K in Alert_Cause_Key]: { value: Alert_Cause_Value; options: any } },
    Effect: {
        NO_SERVICE: {
            value: 1,
            options: {},
        },
        REDUCED_SERVICE: {
            value: 2,
            options: {},
        },
        SIGNIFICANT_DELAYS: {
            value: 3,
            options: {},
        },
        DETOUR: {
            value: 4,
            options: {},
        },
        ADDITIONAL_SERVICE: {
            value: 5,
            options: {},
        },
        MODIFIED_SERVICE: {
            value: 6,
            options: {},
        },
        OTHER_EFFECT: {
            value: 7,
            options: {},
        },
        UNKNOWN_EFFECT: {
            value: 8,
            options: {},
        },
        STOP_MOVED: {
            value: 9,
            options: {},
        },
    } as {
        [K in Alert_Effect_Key]: { value: Alert_Effect_Value; options: any }
    },
}

export const FeedEntity = {
    read(pbf: Pbf, end?: number): IFeedEntity {
        return pbf.readFields(
            FeedEntity._readField,
            {
                id: '',
                is_deleted: false,
                trip_update: null,
                vehicle: null,
                alert: null,
            },
            end,
        )
    },
    _readField(tag: number, obj: any, pbf: Pbf): void {
        if (tag === 1) obj.id = pbf.readString()
        else if (tag === 2) obj.is_deleted = pbf.readBoolean()
        else if (tag === 3)
            obj.trip_update = TripUpdate.read(pbf, pbf.readVarint() + pbf.pos)
        else if (tag === 4)
            obj.vehicle = VehiclePosition.read(pbf, pbf.readVarint() + pbf.pos)
        else if (tag === 5)
            obj.alert = Alert.read(pbf, pbf.readVarint() + pbf.pos)
    },
    write(obj: IFeedEntity, pbf: Pbf): void {
        if (obj.id) pbf.writeStringField(1, obj.id)
        if (obj.is_deleted) pbf.writeBooleanField(2, obj.is_deleted)
        if (obj.trip_update)
            pbf.writeMessage(3, TripUpdate.write, obj.trip_update)
        if (obj.vehicle) pbf.writeMessage(4, VehiclePosition.write, obj.vehicle)
        if (obj.alert) pbf.writeMessage(5, Alert.write, obj.alert)
    },
}

export const FeedMessage = {
    read(pbf: Pbf, end?: number): IFeedMessage {
        return pbf.readFields(
            FeedMessage._readField,
            { header: null, entity: [] },
            end,
        )
    },
    _readField(tag: number, obj: any, pbf: Pbf): void {
        if (tag === 1)
            obj.header = FeedHeader.read(pbf, pbf.readVarint() + pbf.pos)
        else if (tag === 2)
            obj.entity.push(FeedEntity.read(pbf, pbf.readVarint() + pbf.pos))
    },
    write(obj: IFeedMessage, pbf: Pbf): void {
        if (obj.header) pbf.writeMessage(1, FeedHeader.write, obj.header)
        if (obj.entity)
            for (let i = 0; i < obj.entity.length; i++)
                pbf.writeMessage(2, FeedEntity.write, obj.entity[i])
    },
}
